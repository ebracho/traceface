#!/usr/bin/env python3

import bdb
import copy

import jinja2

def main():
	import test
	tracer = Tracer()
	tracer.runcall(test.hello)
	tracer.handle_last()

	trace = tracer.trace
	for frame in trace:
		frame.render()

	with open('template.jinja2', 'r') as f:
		template = jinja2.Template(f.read())
	with open('trace.html', 'w') as f:
		stream = template.stream({'trace': trace})
		stream.enable_buffering()
		stream.dump(f)

class Tracer(bdb.Bdb):
	def __init__(self):
		self.trace = []
		self.last_frame = None
		super().__init__()

	def user_call(self, frame, argument_list):
		self._add_trace(frame.f_back)
		self.last_frame = frame

	def handle_last(self):
		self._add_trace(self.last_frame)

	def _add_trace(self, frame):
		code = frame.f_code
		self.trace.append(Frame(code.co_filename, code.co_name, frame.f_lineno))

class Frame:
	files = {}

	def __init__(self, filepath, func_name, line_no):
		self.filepath = filepath
		self.func_name = func_name
		self.line_no = line_no

		self.rendered = None

	def render(self):
		lines = self.files.get(self.filepath)
		if lines is None:
			with open(self.filepath, 'r') as f:
				lines = self.files[self.filepath] = f.readlines()
		start = max(self.line_no - 4, 0)
		self.rendered = ''.join(lines[start:self.line_no + 3])

	def __repr__(self):
		return '%s(%r, %r, %r)' % (self.__class__.__name__, self.filepath, self.func_name, self.line_no)

if __name__ == '__main__':
	main()
